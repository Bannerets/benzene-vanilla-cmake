Benzene TODO file
=================

broderic [090901] (in rough order of importance)
* Improve DFPN:
  * add work counter
  * add ability to dump solved states over threshold to a log
  * avoid double counting in proof/disproof numbers
  * "Proof simulation"
  * db read/write
* Handle terminal states properly in MoHex
  Ie, do not use fillin and deletion to do this
* Create scripts to build book/solve deep states
  * grab unsolved leaves over a certain depth
  * actual multi-threaded 'solve positions' script
* Add time control to mohex
* Switch dead region/decomp detection to new Phil algo
* Create HexPosition class; make StoneBoard use it.
* Better book visualization tools
* Add HexBoard::Resize() method; use in SyncBoard()
* Have Wolve check dfpn TT for losing moves during move generation.
* Have MoHex update its tree if dfpn solved states?
* Support reading installed shared data in $(pkgdatadir)
* Remove lssolve from src/util/ and replace with boost::ublas

ph [090416]
* Unique probe sequence for solver:
  * If try losing move and PV winning reply matches pattern, then state loses
* Induced path transpositions for solver:
  * Apply files to get more DB transpositions by shifting played moves
  * Compute closed set of all transposition types
* Solver move ordering:
  * Try moving split decomposition moves to the top of the list
  * If that doesn't work, try making the mustplay count for split decomposition
    moves equal to the max mustplay on either side of the decomp.
* Reversible moves
  * Pattern file exists, just need to add it to ICE :) Like vulnerable, but
    no fill-in can be computed
* Virtual-connection improvements:
  * Add fill-in for keys (and maybe endpoints?)
  * Common-substrategy
  * Backing-up/recalling connections..?
* MoHex improvements:
  * Learned-reponse array through UCT tree sequences (use for rollouts)
* Opening books guided adjustment:
  * Allow it to analyze/expand path of sgfs to where the book drops out
* Evaluation function possibilities
  * Try weighted tuple of different virtual connection distances between edges
* Tournament tool improvements:
  * Script for automatic post-game sgf analysis with solver
* Proof-set pruned states should perhaps be stored in DB/TT..?
* Inferior cell improvements:
  * Implement algorithm developed with Laurie to find more dead cell patterns
  * Develop similar algorithm for captured
  * Create larger list of vulnerable and dominated from above work
* Mustplay mask
* Website stuff:
  * Create handicap Java applet
